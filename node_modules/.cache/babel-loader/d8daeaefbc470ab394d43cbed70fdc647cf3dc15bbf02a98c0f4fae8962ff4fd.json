{"ast":null,"code":"/**\n * ConsoleLogger singleton.\n */\nclass ConsoleLogger {\n  constructor(levels) {\n    this.levels = levels;\n  }\n  log() {\n    // eslint-disable-next-line no-console\n    if (this.levels.verbose) console.log(...arguments);\n  }\n  info() {\n    if (this.levels.info) console.info(...arguments);\n  }\n  debug() {\n    if (this.levels.debug) console.debug(...arguments);\n  }\n  warn() {\n    if (this.levels.warnings) console.warn(...arguments);\n  }\n  error() {\n    if (this.levels.errors) console.error(...arguments);\n  }\n  static new() {\n    let levels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      verbose: false,\n      info: false,\n      debug: false,\n      warnings: true,\n      errors: true\n    };\n    if (!this.instance) this.instance = new ConsoleLogger(levels);else this.instance.levels = levels;\n    return this.instance;\n  }\n}\nexport { ConsoleLogger as default };","map":{"version":3,"names":["ConsoleLogger","constructor","levels","log","verbose","console","arguments","info","debug","warn","warnings","error","errors","new","length","undefined","instance"],"sources":["D:\\eci\\web\\node_modules\\hero-slider\\src\\modules\\ConsoleLogger.tsx"],"sourcesContent":["export type LoggerLevels = {\n  verbose: boolean;\n  info: boolean;\n  debug: boolean;\n  warnings: boolean;\n  errors: boolean;\n};\n\n/**\n * ConsoleLogger singleton.\n */\nexport default class ConsoleLogger {\n  private constructor(private levels: LoggerLevels) {}\n\n  public log(...data: unknown[]): void {\n    // eslint-disable-next-line no-console\n    if (this.levels.verbose) console.log(...data);\n  }\n\n  public info(...data: unknown[]): void {\n    if (this.levels.info) console.info(...data);\n  }\n\n  public debug(...data: unknown[]): void {\n    if (this.levels.debug) console.debug(...data);\n  }\n\n  public warn(...data: unknown[]): void {\n    if (this.levels.warnings) console.warn(...data);\n  }\n\n  public error(...data: unknown[]): void {\n    if (this.levels.errors) console.error(...data);\n  }\n\n  private static instance: ConsoleLogger | undefined;\n\n  public static new(\n    levels: LoggerLevels = {\n      verbose: false,\n      info: false,\n      debug: false,\n      warnings: true,\n      errors: true\n    }\n  ): ConsoleLogger {\n    if (!this.instance) this.instance = new ConsoleLogger(levels);\n    else this.instance.levels = levels;\n    return this.instance;\n  }\n}\n"],"mappings":"AAQA;;AAEG;AACW,MAAOA,aAAa;EAChCC,YAA4BC,MAAoB;IAApB,IAAM,CAAAA,MAAA,GAANA,MAAM;;EAE3BC,GAAGA,CAAA,EAAmB;;IAE3B,IAAI,IAAI,CAACD,MAAM,CAACE,OAAO,EAAEC,OAAO,CAACF,GAAG,CAAC,GAAAG,SAAO,CAAC;;EAGxCC,IAAIA,CAAA,EAAmB;IAC5B,IAAI,IAAI,CAACL,MAAM,CAACK,IAAI,EAAEF,OAAO,CAACE,IAAI,CAAC,GAAAD,SAAO,CAAC;;EAGtCE,KAAKA,CAAA,EAAmB;IAC7B,IAAI,IAAI,CAACN,MAAM,CAACM,KAAK,EAAEH,OAAO,CAACG,KAAK,CAAC,GAAAF,SAAO,CAAC;;EAGxCG,IAAIA,CAAA,EAAmB;IAC5B,IAAI,IAAI,CAACP,MAAM,CAACQ,QAAQ,EAAEL,OAAO,CAACI,IAAI,CAAC,GAAAH,SAAO,CAAC;;EAG1CK,KAAKA,CAAA,EAAmB;IAC7B,IAAI,IAAI,CAACT,MAAM,CAACU,MAAM,EAAEP,OAAO,CAACM,KAAK,CAAC,GAAAL,SAAO,CAAC;;EAKzC,OAAOO,GAAGA,CAAA,EAOd;IAAA,IANDX,MAAuB,GAAAI,SAAA,CAAAQ,MAAA,QAAAR,SAAA,QAAAS,SAAA,GAAAT,SAAA;MACrBF,OAAO,EAAE,KAAK;MACdG,IAAI,EAAE,KAAK;MACXC,KAAK,EAAE,KAAK;MACZE,QAAQ,EAAE,IAAI;MACdE,MAAM,EAAE;IACT;IAED,IAAI,CAAC,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACA,QAAQ,GAAG,IAAIhB,aAAa,CAACE,MAAM,CAAC,CAAC,KACzD,IAAI,CAACc,QAAQ,CAACd,MAAM,GAAGA,MAAM;IAClC,OAAO,IAAI,CAACc,QAAQ;;AAEvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}