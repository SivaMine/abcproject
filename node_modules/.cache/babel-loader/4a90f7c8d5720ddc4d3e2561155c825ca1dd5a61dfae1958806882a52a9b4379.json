{"ast":null,"code":"'use strict';\n\nmodule.exports = function () {\n  var _this = this,\n    colorDiff,\n    colorPosDiff,\n    nextColors,\n    nextColorsPos;\n  if (!this.channels[this.activeState]) this.channels[this.activeState] = [];\n\n  // If the actual channel exist, reassign properties and exit\n  // (each channel is saved to prevent recomputing it each time)\n  if (this.channels[this.activeState][this.channelsIndex] !== undefined) {\n    this.activeColors = this.channels[this.activeState][this.channelsIndex].colors;\n    this.activeColorsDiff = this.channels[this.activeState][this.channelsIndex].colorsDiff;\n    this.activeColorsPos = this.channels[this.activeState][this.channelsIndex].colorsPos;\n    this.activeColorsPosDiff = this.channels[this.activeState][this.channelsIndex].colorsPosDiff;\n    return;\n  }\n\n  // Set blank properties\n  this.channels[this.activeState].push([{}]);\n  this.channels[this.activeState][this.channelsIndex].colors = [];\n  this.channels[this.activeState][this.channelsIndex].colorsDiff = [];\n  this.channels[this.activeState][this.channelsIndex].colorsPos = [];\n  this.channels[this.activeState][this.channelsIndex].colorsPosDiff = [];\n  this.activeColors = [];\n  this.activeColorsDiff = [];\n  this.activeColorsPos = [];\n  this.activeColorsPosDiff = [];\n\n  // Go on each gradient of the current state\n  this.states[this.activeState].gradients[this.channelsIndex].forEach(function (color, i) {\n    // Push the hex color converted to rgba on the channel and the active color properties\n    var colorPos = _this.getColorPos(color, i);\n    var color = _this.getColor(color);\n    var rgbaColor = _this.convertColorToRgba(color);\n    var activeChannel = _this.channels[_this.activeState];\n    activeChannel[_this.channelsIndex].colors.push(rgbaColor);\n    _this.activeColors.push(rgbaColor);\n    activeChannel[_this.channelsIndex].colorsPos.push(colorPos);\n    _this.activeColorsPos.push(colorPos);\n\n    // If it's the first channel to be set, set the currentColors\n    if (!_this.isCurrentColorsSet) {\n      _this.currentColors.push(_this.convertColorToRgba(color));\n      _this.currentColorsPos.push(colorPos);\n    }\n\n    // If it's the last gradient, compute the color diff between the last gradient and the first one,\n    // else between the penultimate one and the last one\n    if (_this.channelsIndex === _this.states[_this.activeState].gradients.length - 1) {\n      colorDiff = _this.getColorDiff(activeChannel[_this.channelsIndex].colors[i], activeChannel[0].colors[i]);\n      colorPosDiff = _this.getColorPosDiff(activeChannel[_this.channelsIndex].colorsPos[i], activeChannel[0].colorsPos[i]);\n    } else {\n      nextColors = _this.convertColorToRgba(_this.getColor(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i]));\n      nextColorsPos = _this.getColorPos(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i], i);\n      colorDiff = _this.getColorDiff(activeChannel[_this.channelsIndex].colors[i], nextColors);\n      colorPosDiff = _this.getColorPosDiff(activeChannel[_this.channelsIndex].colorsPos[i], nextColorsPos);\n    }\n    activeChannel[_this.channelsIndex].colorsDiff.push(colorDiff);\n    _this.activeColorsDiff.push(colorDiff);\n    activeChannel[_this.channelsIndex].colorsPosDiff.push(colorPosDiff);\n    _this.activeColorsPosDiff.push(colorPosDiff);\n  });\n  this.activetransitionSpeed = this.states[this.activeState].transitionSpeed || 5000;\n  this.isCurrentColorsSet = true;\n};","map":{"version":3,"names":["module","exports","_this","colorDiff","colorPosDiff","nextColors","nextColorsPos","channels","activeState","channelsIndex","undefined","activeColors","colors","activeColorsDiff","colorsDiff","activeColorsPos","colorsPos","activeColorsPosDiff","colorsPosDiff","push","states","gradients","forEach","color","i","colorPos","getColorPos","getColor","rgbaColor","convertColorToRgba","activeChannel","isCurrentColorsSet","currentColors","currentColorsPos","length","getColorDiff","getColorPosDiff","activetransitionSpeed","transitionSpeed"],"sources":["D:/eci/web/node_modules/granim/lib/setColors.js"],"sourcesContent":["'use strict';\r\n\r\nmodule.exports = function() {\r\n\tvar _this = this, colorDiff, colorPosDiff, nextColors, nextColorsPos;\r\n\r\n\tif (!this.channels[this.activeState]) this.channels[this.activeState] = [];\r\n\r\n\t// If the actual channel exist, reassign properties and exit\r\n\t// (each channel is saved to prevent recomputing it each time)\r\n\tif (this.channels[this.activeState][this.channelsIndex] !== undefined) {\r\n\t\tthis.activeColors = this.channels[this.activeState][this.channelsIndex].colors;\r\n\t\tthis.activeColorsDiff = this.channels[this.activeState][this.channelsIndex].colorsDiff;\r\n\t\tthis.activeColorsPos = this.channels[this.activeState][this.channelsIndex].colorsPos;\r\n\t\tthis.activeColorsPosDiff = this.channels[this.activeState][this.channelsIndex].colorsPosDiff;\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Set blank properties\r\n\tthis.channels[this.activeState].push([{}]);\r\n\tthis.channels[this.activeState][this.channelsIndex].colors = [];\r\n\tthis.channels[this.activeState][this.channelsIndex].colorsDiff = [];\r\n\tthis.channels[this.activeState][this.channelsIndex].colorsPos = [];\r\n\tthis.channels[this.activeState][this.channelsIndex].colorsPosDiff = [];\r\n\tthis.activeColors = [];\r\n\tthis.activeColorsDiff = [];\r\n\tthis.activeColorsPos = [];\r\n\tthis.activeColorsPosDiff = [];\r\n\r\n\t// Go on each gradient of the current state\r\n\tthis.states[this.activeState].gradients[this.channelsIndex].forEach(function(color, i) {\r\n\t\t// Push the hex color converted to rgba on the channel and the active color properties\r\n\t\tvar colorPos = _this.getColorPos(color, i);\r\n\t\tvar color = _this.getColor(color);\r\n\t\tvar rgbaColor = _this.convertColorToRgba(color);\r\n\t\tvar activeChannel = _this.channels[_this.activeState];\r\n\r\n\t\tactiveChannel[_this.channelsIndex].colors.push(rgbaColor);\r\n\t\t_this.activeColors.push(rgbaColor);\r\n\t\tactiveChannel[_this.channelsIndex].colorsPos.push(colorPos);\r\n\t\t_this.activeColorsPos.push(colorPos);\r\n\r\n\t\t// If it's the first channel to be set, set the currentColors\r\n\t\tif (!_this.isCurrentColorsSet) {\r\n\t\t\t_this.currentColors.push(_this.convertColorToRgba(color));\r\n\t\t\t_this.currentColorsPos.push(colorPos);\r\n\t\t}\r\n\r\n\t\t// If it's the last gradient, compute the color diff between the last gradient and the first one,\r\n\t\t// else between the penultimate one and the last one\r\n\t\tif (_this.channelsIndex === _this.states[_this.activeState].gradients.length - 1) {\r\n\t\t\tcolorDiff = _this.getColorDiff(\r\n\t\t\t\tactiveChannel[_this.channelsIndex].colors[i],\r\n\t\t\t\tactiveChannel[0].colors[i]\r\n\t\t\t);\r\n\t\t\tcolorPosDiff = _this.getColorPosDiff(\r\n\t\t\t\tactiveChannel[_this.channelsIndex].colorsPos[i],\r\n\t\t\t\tactiveChannel[0].colorsPos[i]\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\t\t\tnextColors = _this.convertColorToRgba(_this.getColor(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i]));\r\n\t\t\tnextColorsPos = _this.getColorPos(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i], i);\r\n\t\t\tcolorDiff = _this.getColorDiff(activeChannel[_this.channelsIndex].colors[i], nextColors);\r\n\t\t\tcolorPosDiff = _this.getColorPosDiff(activeChannel[_this.channelsIndex].colorsPos[i], nextColorsPos);\r\n\t\t}\r\n\r\n\t\tactiveChannel[_this.channelsIndex].colorsDiff.push(colorDiff);\r\n\t\t_this.activeColorsDiff.push(colorDiff);\r\n\t\tactiveChannel[_this.channelsIndex].colorsPosDiff.push(colorPosDiff);\r\n\t\t_this.activeColorsPosDiff.push(colorPosDiff);\r\n\t});\r\n\r\n\tthis.activetransitionSpeed = this.states[this.activeState].transitionSpeed || 5000;\r\n\tthis.isCurrentColorsSet = true;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}